/**
 * Application monitoring and error tracking
 */

// Error severity levels
export enum ErrorSeverity {
  INFO = "info",
  WARNING = "warning",
  ERROR = "error",
  CRITICAL = "critical",
}

// Error context interface
interface ErrorContext {
  userId?: string
  path?: string
  component?: string
  action?: string
  additionalData?: Record<string, any>
}

// Initialize error tracking
let isErrorTrackingInitialized = false

// Initialize error tracking (would connect to Sentry or similar in production)
export function initErrorTracking() {
  if (isErrorTrackingInitialized) return

  // In production, this would initialize Sentry or another error tracking service
  console.log("[Monitoring] Error tracking initialized")

  // Set up global error handler
  if (typeof window !== "undefined") {
    window.addEventListener("error", (event) => {
      captureError(event.error, {
        path: window.location.pathname,
      })
    })

    window.addEventListener("unhandledrejection", (event) => {
      captureError(event.reason, {
        path: window.location.pathname,
      })
    })
  }

  isErrorTrackingInitialized = true
}

// Capture and log errors
export function captureError(
  error: Error | string,
  context: ErrorContext = {},
  severity: ErrorSeverity = ErrorSeverity.ERROR,
) {
  const errorObj = typeof error === "string" ? new Error(error) : error
  const timestamp = new Date().toISOString()

  // Format error for logging
  const logEntry = {
    timestamp,
    severity,
    message: errorObj.message,
    stack: errorObj.stack,
    ...context,
  }

  // Log to console in development
  if (process.env.NODE_ENV !== "production") {
    console.error("[Error Tracking]", logEntry)
  }

  // In production, this would send the error to Sentry or similar
  // sentry.captureException(errorObj, { extra: context })

  // For now, we'll just log to console in all environments
  console.error("[Error Tracking]", logEntry)

  // Return the error ID that would be generated by the error tracking service
  return `error-${Date.now()}`
}

// Track user events and interactions
export function trackEvent(eventName: string, properties: Record<string, any> = {}) {
  const timestamp = new Date().toISOString()

  // Format event for logging
  const eventData = {
    timestamp,
    event: eventName,
    ...properties,
  }

  // Log to console in development
  if (process.env.NODE_ENV !== "production") {
    console.log("[Analytics]", eventData)
  }

  // In production, this would send the event to an analytics service
  // analytics.track(eventName, properties)

  // For now, we'll just log to console
  console.log("[Analytics]", eventData)
}

// Initialize monitoring on app load
export function initMonitoring() {
  initErrorTracking()
  console.log("[Monitoring] Application monitoring initialized")
}
